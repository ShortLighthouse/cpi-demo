name: CICD Branch Merge Actions

on:
  pull_request:
    types:
      - closed

env:
  # Put here the ID of the integration flow that will be uploaded to the repository
  INTEGRATION_FLOW_ID: Test_Repository
  VERSION: ""
  BRANCH_SHA: ""
  BRANCH_NAME: ""

  # This is the URL of the SAP CPI runtime
  CPI_ENDPOINT_URL: ${{ secrets.CPI_ENDPOINT_URL }}

  # This is the URL of the SAP API runtime
  API_ENDPOINT_URL: ${{ secrets.API_ENDPOINT_URL }}

  # This is the ClientID and Client Secret that is used to access the CPI HTTPS Endpoints
  # It is in the form of ClientID:Client Secret, and is then Base64 encoded.
  CLIENT_ID_SECRET_BASE_64: ${{ secrets.CLIENT_ID_SECRET_BASE_64 }}
  CI_COMMIT_MESSAGE: Add Integration Flow Build Artifacts
  CI_COMMIT_AUTHOR: Continuous Integration
  CI_COMMIT_EMAIL: donotreply@thevoid.com 

jobs:
  push-integration-flow-to-cpi:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Get version of Integration Flow deployed
        id: integration_flow_version
        run: |
         URL_RESPONSE=$(curl --ssl-no-revoke -X GET \
          ${CPI_ENDPOINT_URL}/http/IntegrationRuntimeArtifacts/LatestVersion -H "Authorization: Basic ${{ env.CLIENT_ID_SECRET_BASE_64 }}" \
          -H "id: $INTEGRATION_FLOW_ID" -H "api_endpoint_url: ${API_ENDPOINT_URL}") >> $GITHUB_ENV

          VERSION=$(jq '.entry.properties.Version' <(echo "${URL_RESPONSE}"))

          echo "version=${VERSION}" >> $GITHUB_ENV

      - name: Show Version Retrieved
        run: 'echo "Version: ${{ env.version }}"'

      # Only a single commit is fetched by default, for the ref/SHA that triggered the workflow.
      - name: Checkout
        uses: actions/checkout@v3

      - name: Display Branch
        run: |
          BRANCH_SHA=$(git rev-parse HEAD)
          echo "Branch SHA: ${BRANCH_SHA}"
          BRANCH_NAME=$(git branch --show-current)
          echo "Branch name: ${BRANCH_NAME}"


      # Update metainfo.prop with description containing Branch SHA and Branch name.

      # Create zip file from files and folders.
      - name: Zip the Files and Folders in the Repository
        run: |
          7z a integration_flow.zip ./* -x!images 
          7z u integration_flow.zip ?project
          7z u integration_flow.zip ?README.md

      - name: List files
        run: ls -l -a